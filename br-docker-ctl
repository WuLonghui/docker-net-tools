#!/bin/bash

check_command_avail () {
    while [ $# -ne 0 ]; do
        if ("$1" --version) > /dev/null 2>&1; then :; else
            echo >&2 "$UTIL: missing $1, cannot proceed"
            exit 1
        fi
        shift
    done
}

create_netns_link () {
    mkdir -p /var/run/netns
    if [ ! -e /var/run/netns/"$PID" ]; then
        ln -s /proc/"$PID"/ns/net /var/run/netns/"$PID"
        trap 'delete_netns_link' 0
        for signal in 1 2 3 13 14 15; do
            trap 'delete_netns_link; trap - $signal; kill -$signal $$' $signal
        done
    fi
}

delete_netns_link () {
    rm -f /var/run/netns/"$PID"
}

add_if () {
    BRIDGE="$1"
    INTERFACE="$2"
    CONTAINER="$3"
    ADDRESS="$4"
    GATEWAY="$5"

    if [ "$#" -lt 3 ]; then
        usage
        exit 1
    fi
    
    if CONTAINER_ID=`docker inspect -f '{{.Id}}' "${CONTAINER}"`; then :; else
        echo >&2 "$UTIL: Container ${CONTAINER} not found"
        exit 1
    fi
    
    if PID=`docker inspect -f '{{.State.Pid}}' "$CONTAINER"`; then :; else
        echo >&2 "$UTIL: Failed to get the PID of the container"
        exit 1
    fi
    
    create_netns_link

    # Create a veth pair.
    PORTNAME="${CONTAINER_ID:0:13}"
    if ip link add "${PORTNAME}_l" type veth peer name "${PORTNAME}_c"; then :; else
        echo >&2 "$UTIL: create veth pair failed"
        exit 1
    fi

    # Add one end of veth to bridge.
    if brctl addif ${BRIDGE} "${PORTNAME}_l"; then :; else
         ip link delete "${PORTNAME}_l"
         echo >&2 "$UTIL: addif failed"
         exit 1
    fi

    ip link set "${PORTNAME}_l" up

    # Move "${PORTNAME}_c" inside the container and changes its name.
    ip link set "${PORTNAME}_c" netns "$PID"
    ip netns exec "$PID" ip link set dev "${PORTNAME}_c" name "$INTERFACE"
    ip netns exec "$PID" ip link set "$INTERFACE" up

    if [ -n "$ADDRESS" ]; then
        ip netns exec "$PID" ip addr add "$ADDRESS" dev "$INTERFACE"
    fi

    if [ -n "$GATEWAY" ]; then
        ip netns exec "$PID" ip route add default via "$GATEWAY"
    fi
}

del_if () {
    BRIDGE="$1"
    INTERFACE="$2"
    CONTAINER="$3"

    if [ "$#" -lt 3 ]; then
        usage
        exit 1
    fi

    if CONTAINER_ID=`docker inspect -f '{{.Id}}' "${CONTAINER}"`; then :; else
        echo >&2 "$UTIL: Container ${CONTAINER} not found"
        exit 1
    fi

    PORTNAME="${CONTAINER_ID:0:13}"
    brctl delif "$BRIDGE" "${PORTNAME}_l"

    ip link delete "${PORTNAME}_l"
}

usage() {
    cat << EOF
${UTIL}: Performs integration of brctl with Docker.
usage: ${UTIL} COMMAND

Commands:
  addif BRIDGE INTERFACE CONTAINER [ADDRESS [GATEWAY]]

  delif BRIDGE INTERFACE CONTAINER

Options:
  -h, --help        display this help message.
EOF
}

UTIL=$(basename $0)
check_command_avail brctl docker uuidgen

if (ip netns) > /dev/null 2>&1; then :; else
    echo >&2 "$UTIL: ip utility not found (or it does not support netns),"\
             "cannot proceed"
    exit 1
fi

if [ $# -eq 0 ]; then
    usage
    exit 0
fi

case $1 in
    "addif")
        shift
        add_if "$@"
        exit 0
        ;;
    "delif")
        shift
        del_if "$@"
        exit 0
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        echo >&2 "$UTIL: unknown command \"$1\" (use --help for help)"
        exit 1
        ;;
